# BUILD_CONFIG - Either "Debug" or "Release"; controls optimization and debugging flags
# ARCH - Architecture of target platform
# PLATFORM - Target platform
# BUILD_PATH - Where built products are placed
# CFLAGS - Flags passed to the compiler and linker
# INCLUDE_PATHS - List of search directories for includes (don't include the -I flag); passed to the preprocessor and compiler
# DEFINES - List of preprocessor macros (don't include the -D flag); passed to the preprocessor and compiler
# CPPFLAGS - Flags passed to the preprocessor and compiler
# WARN_FLAGS - Diagnostic flags passed to the compiler
# LDFLAGS - Flags passed only to the linker
# CCFLAGS - Flags passed only to the C compiler
# OBJCFLAGS - Flags used when compiling Objective-C sources; passed to both the compiler and linker
# USE_OBJC_ARC - If YES, support Objective-C automatic retain counting

BUILD_CONFIG?= Debug
ARCH?= $(shell uname -m)
PLATFORM?= MacOSX
BUILD_PATH?= $(ARCH)-$(PLATFORM)-$(BUILD_CONFIG)
VPATH+= $(BUILD_PATH)

.DEFAULT_GOAL = all
.PHONY: all
all: $(ALL_TARGETS)

.PHONY: build-path
build-path:
	mkdir -p $(BUILD_PATH)

very-clean:
	rm -rf $(BUILD_PATH)

OBJECTS = $(addprefix $(BUILD_PATH)/,$(SOURCES:%.m=%.o))
EXECUTABLE_NAME?= $(PRODUCT_NAME)$(EXECUTABLE_SUFFIX)
EXECUTABLE_PATH = $(EXECUTABLES_PATH)/$(EXECUTABLE_NAME)

RSYNC = rsync
RSYNC_FLAGS = -ru --exclude=.DS_Store --exclude='.svn' --exclude='*.swp'

CPPFLAGS = -Wcomment -Wundef -Wendif-labels $(DEFINES:%=-D%) $(INCLUDE_PATHS:%=-I%)

ifeq ($(PLATFORM), MacOSX)
OS_VERSION_MIN?= 10.7
CPPFLAGS+= -mmacosx-version-min=$(OS_VERSION_MIN)
else ifeq ($(findstring iPhone,$(PLATFORM)), iPhone)
OS_VERSION_MIN?= 5.1
CPPFLAGS+= -miphoneos-version-min=$(OS_VERSION_MIN)
else
$(error Unsupported platform “$(PLATFORM)”)
endif

SDK_NAME?= $(PLATFORM)$(OS_VERSION_MIN).sdk
DEVELOPER_PATH?= /Applications/Xcode.app/Contents/Developer
PLATFORM_PATH = $(DEVELOPER_PATH)/Platforms/$(PLATFORM).platform
SDK_PATH = $(PLATFORM_PATH)/Developer/SDKs/$(SDK_NAME)
CFLAGS+= -arch $(ARCH) -isysroot $(SDK_PATH)

VERSION = $(shell git describe --tags --dirty --always --abbrev=6)
DEFINES+= VERSION="$(VERSION)"

PREFIX_HEADER?= $(PRODUCT_NAME)-Prefix.pch
PRECOMP_HEADER = $(notdir $(addsuffix $(PREFIX_HEADER),.gch))
$(SOURCES): $(BUILD_PATH)/$(PRECOMP_HEADER)
PREFIX_CPPFLAGS:= $(CPPFLAGS)
CPPFLAGS+= -include $(notdir $(PREFIX_HEADER))

$(BUILD_PATH)/$(PRECOMP_HEADER): $(PREFIX_HEADER)
	@echo "Precompile (ObjC) $@"
	$(CC) $(PREFIX_CPPFLAGS) $(CFLAGS) -x objective-c-header -o $@ -c $^

ifeq ($(BUILD_CONFIG), Debug)
    CFLAGS+= -g -fno-inline -O0
    DEFINES+= DEBUG CONFIG_DEBUG
else
    CFLAGS+= -Os
    DEFINES+= NDEBUG CONFIG_RELEASE NS_BLOCK_ASSERTIONS
endif

ifeq ($(USE_OBJC_ARC), YES)
    CFLAGS+= -fobjc-arc -fobjc-abi-version=2 -fobjc-legacy-dispatch
endif

CCFLAGS+= -std=gnu99 -fpascal-strings
ifneq ($(findstring arm, $(ARCH)), arm)
CCFLAGS+= -fasm-blocks
endif
WARN_CFLAGS+= -fmessage-length=0 -Wno-trigraphs -Werror-implicit-function-declaration -Wmissing-field-initializers \
    -Wmissing-prototypes -Wreturn-type -Wimplicit-atomic-properties -Wformat -Wmissing-braces -Wparentheses -Wswitch \
    -Wunused-function -Wunused-label -Wno-unused-parameter -Wunused-variable -Wunused-value -Wuninitialized \
    -Wunknown-pragmas -Wshadow -Wfour-char-constants -Wsign-compare -Wshorten-64-to-32 -Wpointer-sign -Wnewline-eof \
    -Wno-selector -Wstrict-selector-match -Wundeclared-selector -Wdeprecated-implementations -Wprotocol \
    -Wdeprecated-declarations -Wconversion -Wsign-conversion
DEFINES+= "IBOutlet=__attribute__((iboutlet))" \
    "IBOutletCollection(ClassName)=__attribute__((iboutletcollection(ClassName)))" \
    "IBAction=void)__attribute__((ibaction)"

$(BUILD_PATH)/%.o: %.m
	@echo "Compiling (ObjC) $@"
	$(CC) $(CPPFLAGS) $(CCFLAGS) $(OBJCFLAGS) $(CFLAGS) $(WARN_CFLAGS) -o $@ -c $<

.PHONY: clean
clean::
	@echo "Cleaning (Objects)"
	rm -f $(OBJECTS)

trace::
	echo $(subst Simulator,,$(PLATFORM))
